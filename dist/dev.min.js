(vovas = { main() {
(()=>{function d(t){return typeof t=="function"}var c=class extends Error{constructor(e){super(`smork: ${e}`)}};function l(t,e){return d(t)?u(t,e):new o(t)}var a=class{constructor(e){this._value=e}watchers=new Set;activeWatchers=new WeakSet;get(){return T?.(this),this._value}_set(e){let{_value:n}=this;if(e!==this._value){this._value=e;try{for(let r of this.watchers){if(this.activeWatchers.has(r)){console.warn("smork: watcher is already active \u2014 perhaps a circular dependency \u2014 exiting watch to prevent infinite loop");return}this.activeWatchers.add(r),r(e,n)}}finally{this.activeWatchers=new WeakSet}}}runAndWatch(e){e(this._value,this._value),this.watch(e)}watchImmediate=this.runAndWatch;watch(e){this.watchers.add(e)}onChange=this.watch;unwatch(e){this.watchers.delete(e)}get value(){return this.get()}map(e){return new i(()=>e(this.value))}compute=this.map;merge(e){return e?u(()=>({...this.value,...m(e)})):this}},o=class extends a{set(e){this._set(e)}set value(e){this.set(e)}get value(){return this.get()}bridge(e,n){return new s(()=>e(this.value),r=>this.set(n(r)))}};var T,i=class extends o{constructor(n){super(void 0);this.getter=n;this.track()}dependencies=new Set;track=()=>{if(T)throw new c("Tried to compute a ref while another one is already being computed \u2014 did you nest a computed ref in another ref's getter function?");this.dependencies.forEach(n=>n.unwatch(this.track)),this.dependencies=new Set;try{T=n=>{n.watch(this.track),this.dependencies.add(n)},this._set(this.getter())}finally{T=void 0}}},s=class extends o{constructor(n,r,R=!1){let f=new i(n);super(f.value);this.setter=r;this.allowMismatch=R;f.watch(h=>this._set(h))}set(n){if(this.setter(n),!this.allowMismatch&&this.value!==n)throw new c("Setter did not update the value. If you want to allow this, set the allowMismatch property to true.")}};function u(t,e){return e?new s(t,e):new i(t)}function p(t){return u(()=>!t.value)}function y(t){return(e,n,r)=>t instanceof a?e(t):d(t)?n(t):r(t)}function m(t){return y(t)(e=>e.value,e=>e(),e=>e)}function x(t,e){Object.assign(t,e)}x(window,{ref:l,computed:u,useNot:p,BaseRef:a,Ref:o,ComputedRef:i,WritableComputedRef:s});})();
}}).main();
