(vovas = { main() {
(()=>{function x(t,e){return Object.fromEntries(Object.entries(t).map(([n,r])=>[n,e(r,n)]))}function T(t){return typeof t=="function"}function h(t,e){return Object.assign(t,e)}var d=class extends Error{constructor(e){super(`smork: ${e}`)}};function y(t,e){return T(t)?u(t,e):new o(t)}var i=class{constructor(e){this._value=e}watchers=new Set;activeWatchers=new WeakSet;get(){return c?.(this),this._value}_set(e){let{_value:n}=this;if(e!==this._value){this._value=e;try{for(let r of this.watchers){if(this.activeWatchers.has(r)){console.warn("smork: watcher is already active \u2014 perhaps a circular dependency \u2014 exiting watch to prevent infinite loop");return}this.activeWatchers.add(r),r(e,n)}}finally{this.activeWatchers=new WeakSet}}}runAndWatch(e){e(this._value,this._value),this.watch(e)}watchImmediate=this.runAndWatch;watch(e){this.watchers.add(e)}onChange=this.watch;unwatch(e){this.watchers.delete(e)}get value(){return this.get()}map(e){let n=new f(this,e);return T(n.value)?(this.unwatch(n.update),(...r)=>new f(this,p=>e(p)(...r))):n}merge(e){return e?u(()=>({...this.value,...v(e)})):this}uses(e){return h(this,x(e,this.map))}},f=class extends i{constructor(n,r){var e=(...A)=>(super(...A),this.dependency=n,this.mapper=r,this);n&&(e(r(n.value)),n.watch(this.update))}update=n=>this._set(this.mapper(n))},o=class extends i{set(e){this._set(e)}set value(e){this.set(e)}get value(){return this.get()}bridge(e,n){return new a(()=>e(this.value),r=>this.set(n(r)))}};var c,s=class extends o{constructor(n){super(void 0);this.getter=n;this.track()}dependencies=new Set;track=()=>{if(c)throw new d("Tried to compute a ref while another one is already being computed \u2014 did you nest a computed ref in another ref's getter function?");this.dependencies.forEach(n=>n.unwatch(this.track)),this.dependencies=new Set;try{c=n=>{n.watch(this.track),this.dependencies.add(n)},this._set(this.getter())}finally{c=void 0}}},a=class extends o{constructor(n,r,p=!1){let l=new s(n);super(l.value);this.setter=r;this.allowMismatch=p;l.watch(g=>this._set(g))}set(n){if(this.setter(n),!this.allowMismatch&&this.value!==n)throw new d("Setter did not update the value. If you want to allow this, set the allowMismatch property to true.")}};function u(t,e){return e?new a(t,e):new s(t)}function m(t){return u(()=>!t.value)}function w(t){return(e,n,r)=>t instanceof i?e(t):T(t)?n(t):r(t)}function v(t){return w(t)(e=>e.value,e=>e(),e=>e)}function R(t,e){Object.assign(t,e)}R(window,{ref:y,computed:u,useNot:m,BaseRef:i,Ref:o,ComputedRef:s,WritableComputedRef:a});})();
}}).main();
